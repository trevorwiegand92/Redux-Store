{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Mr. Beefy/Desktop/code/Redux-Store/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/Mr. Beefy/Desktop/code/Redux-Store/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useReducer}from'react';import{UPDATE_PRODUCTS,ADD_TO_CART,UPDATE_CART_QUANTITY,REMOVE_FROM_CART,ADD_MULTIPLE_TO_CART,UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY,CLEAR_CART,TOGGLE_CART}from'./actions';// TODO: To get a better understand of how a reducer works - add comments to the various actions in the reducer\nexport var reducer=function reducer(state,action){switch(action.type){// TODO: Add a comment describing the functionality of the UPDATE_PRODUCTS case\n// Your comment here\ncase UPDATE_PRODUCTS:return _objectSpread(_objectSpread({},state),{},{products:_toConsumableArray(action.products)});case ADD_TO_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:[].concat(_toConsumableArray(state.cart),[action.product])});case ADD_MULTIPLE_TO_CART:return _objectSpread(_objectSpread({},state),{},{cart:[].concat(_toConsumableArray(state.cart),_toConsumableArray(action.products))});// TODO: Add a comment describing the functionality of the UPDATE_CART_QUANTITY case\n// Your comment here\ncase UPDATE_CART_QUANTITY:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:state.cart.map(function(product){if(action._id===product._id){product.purchaseQuantity=action.purchaseQuantity;}return product;})});// TODO: Add a comment describing the functionality of the REMOVE_FROM_CART case\n// Your comment here\ncase REMOVE_FROM_CART:var newState=state.cart.filter(function(product){return product._id!==action._id;});return _objectSpread(_objectSpread({},state),{},{cartOpen:newState.length>0,cart:newState});case CLEAR_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:false,cart:[]});case TOGGLE_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:!state.cartOpen});case UPDATE_CATEGORIES:return _objectSpread(_objectSpread({},state),{},{categories:_toConsumableArray(action.categories)});case UPDATE_CURRENT_CATEGORY:return _objectSpread(_objectSpread({},state),{},{currentCategory:action.currentCategory});// TODO: Add a comment describing what the default case is for\n// Your comment here\ndefault:return state;}};export function useProductReducer(initialState){return useReducer(reducer,initialState);}","map":{"version":3,"sources":["C:/Users/Mr. Beefy/Desktop/code/Redux-Store/client/src/utils/reducers.js"],"names":["useReducer","UPDATE_PRODUCTS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","reducer","state","action","type","products","cartOpen","cart","product","map","_id","purchaseQuantity","newState","filter","length","categories","currentCategory","useProductReducer","initialState"],"mappings":"yVAAA,OAASA,UAAT,KAA2B,OAA3B,CACA,OACEC,eADF,CAEEC,WAFF,CAGEC,oBAHF,CAIEC,gBAJF,CAKEC,oBALF,CAMEC,iBANF,CAOEC,uBAPF,CAQEC,UARF,CASEC,WATF,KAUO,WAVP,CAYA;AACA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACxC,OAAQA,MAAM,CAACC,IAAf,EACE;AACA;AACA,IAAKZ,CAAAA,eAAL,CACE,sCACKU,KADL,MAEEG,QAAQ,oBAAMF,MAAM,CAACE,QAAb,CAFV,GAKF,IAAKZ,CAAAA,WAAL,CACE,sCACKS,KADL,MAEEI,QAAQ,CAAE,IAFZ,CAGEC,IAAI,8BAAML,KAAK,CAACK,IAAZ,GAAkBJ,MAAM,CAACK,OAAzB,EAHN,GAMF,IAAKZ,CAAAA,oBAAL,CACE,sCACKM,KADL,MAEEK,IAAI,8BAAML,KAAK,CAACK,IAAZ,qBAAqBJ,MAAM,CAACE,QAA5B,EAFN,GAIF;AACA;AACA,IAAKX,CAAAA,oBAAL,CACE,sCACKQ,KADL,MAEEI,QAAQ,CAAE,IAFZ,CAGEC,IAAI,CAAEL,KAAK,CAACK,IAAN,CAAWE,GAAX,CAAe,SAACD,OAAD,CAAa,CAChC,GAAIL,MAAM,CAACO,GAAP,GAAeF,OAAO,CAACE,GAA3B,CAAgC,CAC9BF,OAAO,CAACG,gBAAR,CAA2BR,MAAM,CAACQ,gBAAlC,CACD,CACD,MAAOH,CAAAA,OAAP,CACD,CALK,CAHR,GAWF;AACA;AACA,IAAKb,CAAAA,gBAAL,CACE,GAAIiB,CAAAA,QAAQ,CAAGV,KAAK,CAACK,IAAN,CAAWM,MAAX,CAAkB,SAACL,OAAD,CAAa,CAC5C,MAAOA,CAAAA,OAAO,CAACE,GAAR,GAAgBP,MAAM,CAACO,GAA9B,CACD,CAFc,CAAf,CAIA,sCACKR,KADL,MAEEI,QAAQ,CAAEM,QAAQ,CAACE,MAAT,CAAkB,CAF9B,CAGEP,IAAI,CAAEK,QAHR,GAMF,IAAKb,CAAAA,UAAL,CACE,sCACKG,KADL,MAEEI,QAAQ,CAAE,KAFZ,CAGEC,IAAI,CAAE,EAHR,GAMF,IAAKP,CAAAA,WAAL,CACE,sCACKE,KADL,MAEEI,QAAQ,CAAE,CAACJ,KAAK,CAACI,QAFnB,GAKF,IAAKT,CAAAA,iBAAL,CACE,sCACKK,KADL,MAEEa,UAAU,oBAAMZ,MAAM,CAACY,UAAb,CAFZ,GAKF,IAAKjB,CAAAA,uBAAL,CACE,sCACKI,KADL,MAEEc,eAAe,CAAEb,MAAM,CAACa,eAF1B,GAKF;AACA;AACA,QACE,MAAOd,CAAAA,KAAP,CA5EJ,CA8ED,CA/EM,CAiFP,MAAO,SAASe,CAAAA,iBAAT,CAA2BC,YAA3B,CAAyC,CAC9C,MAAO3B,CAAAA,UAAU,CAACU,OAAD,CAAUiB,YAAV,CAAjB,CACD","sourcesContent":["import { useReducer } from 'react';\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\n// TODO: To get a better understand of how a reducer works - add comments to the various actions in the reducer\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // TODO: Add a comment describing the functionality of the UPDATE_PRODUCTS case\n    // Your comment here\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    // TODO: Add a comment describing the functionality of the UPDATE_CART_QUANTITY case\n    // Your comment here\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    // TODO: Add a comment describing the functionality of the REMOVE_FROM_CART case\n    // Your comment here\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    // TODO: Add a comment describing what the default case is for\n    // Your comment here\n    default:\n      return state;\n  }\n};\n\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n"]},"metadata":{},"sourceType":"module"}