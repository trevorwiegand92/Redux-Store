{"ast":null,"code":"import _slicedToArray from\"C:/Users/Mr. Beefy/Desktop/code/Redux-Store/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect}from'react';import{useQuery}from'@apollo/client';import{useStoreContext}from'../../utils/GlobalState';import{UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY}from'../../utils/actions';import{QUERY_CATEGORIES}from'../../utils/queries';import{idbPromise}from'../../utils/helpers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CategoryMenu(){var _useStoreContext=useStoreContext(),_useStoreContext2=_slicedToArray(_useStoreContext,2),state=_useStoreContext2[0],dispatch=_useStoreContext2[1];var categories=state.categories;var _useQuery=useQuery(QUERY_CATEGORIES),loading=_useQuery.loading,categoryData=_useQuery.data;useEffect(function(){if(categoryData){dispatch({type:UPDATE_CATEGORIES,categories:categoryData.categories});categoryData.categories.forEach(function(category){idbPromise('categories','put',category);});}else if(!loading){idbPromise('categories','get').then(function(categories){dispatch({type:UPDATE_CATEGORIES,categories:categories});});}},[categoryData,loading,dispatch]);var handleClick=function handleClick(id){dispatch({type:UPDATE_CURRENT_CATEGORY,currentCategory:id});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Choose a Category:\"}),categories.map(function(item){return/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){handleClick(item._id);},children:item.name},item._id);})]});}export default CategoryMenu;","map":{"version":3,"sources":["C:/Users/Mr. Beefy/Desktop/code/Redux-Store/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","useStoreContext","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","QUERY_CATEGORIES","idbPromise","CategoryMenu","state","dispatch","categories","loading","categoryData","data","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":"yKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,QAAT,KAAyB,gBAAzB,CACA,OAASC,eAAT,KAAgC,yBAAhC,CACA,OACEC,iBADF,CAEEC,uBAFF,KAGO,qBAHP,CAIA,OAASC,gBAAT,KAAiC,qBAAjC,CACA,OAASC,UAAT,KAA2B,qBAA3B,C,wFAEA,QAASC,CAAAA,YAAT,EAAwB,CACtB,qBAA0BL,eAAe,EAAzC,sDAAOM,KAAP,sBAAcC,QAAd,sBAEA,GAAQC,CAAAA,UAAR,CAAuBF,KAAvB,CAAQE,UAAR,CAEA,cAAwCT,QAAQ,CAACI,gBAAD,CAAhD,CAAQM,OAAR,WAAQA,OAAR,CAAuBC,YAAvB,WAAiBC,IAAjB,CAEAb,SAAS,CAAC,UAAM,CACd,GAAIY,YAAJ,CAAkB,CAChBH,QAAQ,CAAC,CACPK,IAAI,CAAEX,iBADC,CAEPO,UAAU,CAAEE,YAAY,CAACF,UAFlB,CAAD,CAAR,CAIAE,YAAY,CAACF,UAAb,CAAwBK,OAAxB,CAAgC,SAACC,QAAD,CAAc,CAC5CV,UAAU,CAAC,YAAD,CAAe,KAAf,CAAsBU,QAAtB,CAAV,CACD,CAFD,EAGD,CARD,IAQO,IAAI,CAACL,OAAL,CAAc,CACnBL,UAAU,CAAC,YAAD,CAAe,KAAf,CAAV,CAAgCW,IAAhC,CAAqC,SAACP,UAAD,CAAgB,CACnDD,QAAQ,CAAC,CACPK,IAAI,CAAEX,iBADC,CAEPO,UAAU,CAAEA,UAFL,CAAD,CAAR,CAID,CALD,EAMD,CACF,CAjBQ,CAiBN,CAACE,YAAD,CAAeD,OAAf,CAAwBF,QAAxB,CAjBM,CAAT,CAmBA,GAAMS,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,EAAD,CAAQ,CAC1BV,QAAQ,CAAC,CACPK,IAAI,CAAEV,uBADC,CAEPgB,eAAe,CAAED,EAFV,CAAD,CAAR,CAID,CALD,CAOA,mBACE,oCACE,0CADF,CAEGT,UAAU,CAACW,GAAX,CAAe,SAACC,IAAD,qBACd,eAEE,OAAO,CAAE,kBAAM,CACbJ,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX,CACD,CAJH,UAMGD,IAAI,CAACE,IANR,EACOF,IAAI,CAACC,GADZ,CADc,EAAf,CAFH,GADF,CAeD,CAED,cAAehB,CAAAA,YAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}